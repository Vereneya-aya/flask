from flask import Flask, request, jsonify
from flask_wtf import FlaskForm
from wtforms import StringField, IntegerField
from typing import Optional
from wtforms.validators import DataRequired, Regexp, Email, NumberRange, ValidationError
from wtforms.validators import Optional as WTOptional
import subprocess
import shlex
import email_validator


app = Flask(__name__)
app.config["SECRET_KEY"] = "supersecretkey"
app.config["WTF_CSRF_ENABLED"] = False


@app.route("/uptime", methods=["GET"])
def uptime():
    command = shlex.split("uptime -p")
    result = subprocess.run(command, capture_output=True, text=True)
    uptime_info = result.stdout.strip()
    return jsonify({"uptime": uptime_info})


@app.route("/ps", methods=["GET"])
def ps():
    args = request.args.getlist('arg')
    safe_args = [shlex.quote(arg) for arg in args]
    command_str = f"ps {' '.join(safe_args)}"
    command = shlex.split(command_str)
    result = subprocess.run(command, capture_output=True, text=True)
    return f"<pre>{result.stdout}</pre>"


# üìå –§–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class RegistrationForm(FlaskForm):
    phone = StringField("Phone", validators=[
        DataRequired(message="–ü–æ–ª–µ phone –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è"),
        Regexp(r"^\d{10}$", message="–¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 10 —Ü–∏—Ñ—Ä –∏ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã")
    ])
    address = StringField("Address", validators=[
        DataRequired(message="–ü–æ–ª–µ address –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")
    ])
    name = StringField("Name", validators=[
        DataRequired(message="–ü–æ–ª–µ name –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è"),
        Regexp(r"^[–ê-–Ø–Å][–∞-—è—ë]+ [–ê-–Ø–Å]\.[–ê-–Ø–Å]\.$", message="–§–æ—Ä–º–∞—Ç: –§–∞–º–∏–ª–∏—è –ò.–û.")
    ])
    email = StringField("Email", validators=[
        DataRequired(message="–ü–æ–ª–µ email –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è"),
        Email(message="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email")
    ])
    index = IntegerField("Index", validators=[
        DataRequired(message="–ü–æ–ª–µ index –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è"),
        NumberRange(min=100000, max=999999, message="–ò–Ω–¥–µ–∫—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 6 —Ü–∏—Ñ—Ä")
    ])
    comment = StringField("Comment", validators=[WTOptional()])


@app.route("/register", methods=["POST"])
def register():
    form = RegistrationForm(data=request.json)
    if not form.validate():
        return jsonify({"error": form.errors}), 400
    return jsonify({"message": f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, {form.name.data}!"})


# üìå –§–æ—Ä–º–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—á–∞—Å—Ç–ª–∏–≤–æ–≥–æ –±–∏–ª–µ—Ç–∞
class TicketForm(FlaskForm):
    name = StringField("Name", validators=[
        DataRequired(message="–ü–æ–ª–µ name –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")
    ])
    family_name = StringField("Family Name", validators=[
        DataRequired(message="–ü–æ–ª–µ family_name –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")
    ])
    ticket_number = StringField("Ticket Number", validators=[
        DataRequired(message="–ü–æ–ª–µ ticket_number –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è"),
        Regexp(r"^[1-9][0-9]{5}$", message="–ù–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 6-–∑–Ω–∞—á–Ω—ã–º")
    ])


@app.route("/ticket", methods=["POST"])
def check_ticket():
    form = TicketForm(data=request.json)
    if not form.validate():
        return jsonify({"error": form.errors}), 400

    ticket = list(map(int, form.ticket_number.data))
    if sum(ticket[:3]) == sum(ticket[3:]):
        return jsonify({"message": f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤–∞—Å, {form.name.data} {form.family_name.data}!"})
    return jsonify({"message": "–ù–µ—É–¥–∞—á–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!"})


if __name__ == "__main__":
    app.run(debug=True)