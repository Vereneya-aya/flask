import threading
import time
import logging

logging.basicConfig(level=logging.INFO, format="%(message)s")

class Philosopher(threading.Thread):
    running = True

    def __init__(self, index, left_fork, right_fork):
        super().__init__()
        self.index = index
        self.left_fork = left_fork
        self.right_fork = right_fork

    def run(self):
        while self.running:
            logging.info(f"–§–∏–ª–æ—Å–æ—Ñ {self.index} —Ä–∞–∑–º—ã—à–ª—è–µ—Ç üß†")
            time.sleep(1)
            self.dine()

    def dine(self):
        with self.left_fork:  # –ë–µ—Ä—ë–º –ª–µ–≤—É—é –≤–∏–ª–∫—É
            logging.info(f"–§–∏–ª–æ—Å–æ—Ñ {self.index} –≤–∑—è–ª –ª–µ–≤—É—é –≤–∏–ª–∫—É üç¥")
            time.sleep(0.5)  # –î–∞–µ–º —à–∞–Ω—Å –¥—Ä—É–≥–∏–º –ø–æ—Ç–æ–∫–∞–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è
            with self.right_fork:  # –ë–µ—Ä—ë–º –ø—Ä–∞–≤—É—é –≤–∏–ª–∫—É
                logging.info(f"–§–∏–ª–æ—Å–æ—Ñ {self.index} –≤–∑—è–ª –ø—Ä–∞–≤—É—é –≤–∏–ª–∫—É üç¥ –∏ —Ç–µ–ø–µ—Ä—å –µ—Å—Ç üçù")
                time.sleep(1)
                logging.info(f"–§–∏–ª–æ—Å–æ—Ñ {self.index} –∑–∞–∫–æ–Ω—á–∏–ª –µ—Å—Ç—å –∏ –ø–æ–ª–æ–∂–∏–ª –≤–∏–ª–∫–∏")

if __name__ == "__main__":
    forks = [threading.Lock() for _ in range(5)]
    philosophers = [Philosopher(i, forks[i], forks[(i + 1) % 5]) for i in range(5)]

    for p in philosophers:
        p.start()

    time.sleep(10)
    Philosopher.running = False  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª–æ—Å–æ—Ñ–æ–≤

    for p in philosophers:
        p.join()

    logging.info("–í—Å–µ —Ñ–∏–ª–æ—Å–æ—Ñ—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –æ–±–µ–¥")